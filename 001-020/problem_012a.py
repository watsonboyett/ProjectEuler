#
# Problem: 12
# Question: The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
#
# Answer: ??


divs_hash = {}

def count_divs(N):
	global divs_hash 
	
	n = N
	x = 1
	divs_hash = {}
	divs_n = 0
	while n > 1 and x < N/2:
		if (n % x == 0):
			if n in divs_hash:
				divs_n = divs_n + divs_hash[n]
			else:
				divs_n = divs_n + count_divs(n)
				divs_hash[n] = divs_n
			n = n / x
		x = x + 1


N = 500
i = 1
prv_num = sum(xrange(i))
while True:
	cur_num = prv_num + i
	prv_num = cur_num
	i = i + 1
	
	divs_n = count_divs(cur_num)
	divs_hash[cur_num] = divs_n

	print "{0} : {1}".format(cur_num, divs_n)
	
	#break
	if divs_n > N:
		print cur_num
		break

	

